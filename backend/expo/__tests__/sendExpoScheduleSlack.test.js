// tests for sendExpoScheduleSlack
// Generated by serverless-jest-plugin

const AwsMock = require('aws-sdk-mock');
const { WebClient } = require('@slack/web-api');

const jestPlugin = require('serverless-jest-plugin');
const mod = require('../handler');

const { lambdaWrapper } = jestPlugin;
const wrapped = lambdaWrapper.wrap(mod, { handler: 'sendExpoScheduleSlack' });

jest.setTimeout(10000);

const memberships = [
  {
    team_id: 'testTeamId1',
    user_id: 'TestUser',
    team_name: 'My cool team',
  },
  {
    team_id: 'testTeamId1',
    user_id: 'TestUser2',
    team_name: 'My cool team',
  },
  {
    team_id: 'testTeamId2',
    user_id: 'TestUser3',
    team_name: 'My cooler team',
  }];

const users = [
  {
    id: 'TestUser',
    slack_id: '123',
  },
  {
    id: 'TestUser2',
    slack_id: '456',
  },
  {
    id: 'TestUser3',
    slack_id: '789',
  }];

const expoTable = [
  {
    id: 'testDemoId',
    end_time: '2020-09-25T17:55:00Z',
    team_id: 'testTeamId1',
    sponsor_name: 'TestSponsor',
    start_time: '2020-09-25T17:50:00Z',
    zoom_link: 'http://zoom.com',
  },
  {
    id: 'testDemoId2',
    end_time: '2020-09-25T16:10:00Z',
    team_id: 'testTeamId2',
    sponsor_name: 'TestSponsor2',
    start_time: '2020-09-25T16:05:00Z',
    zoom_link: 'http://zoom.com',
  },
  {
    id: 'testDemoId3',
    end_time: '2020-09-25T16:25:00Z',
    team_id: 'testTeamId2',
    sponsor_name: 'TestSponsor',
    start_time: '2020-09-25T16:20:00Z',
    zoom_link: 'http://zoom.com',
  }];

const expectedBlocks = [
  {
    type: 'section',
    fields: [
      {
        type: 'mrkdwn',
        text: '*Prize Category:* TestSponsor\n'
          + '*Time:* 1:50 PM - 1:55 PM\n'
          + '*Zoom Link:* http://zoom.com\n',
      },
    ],
  },
  {
    type: 'section',
    fields: [
      {
        type: 'mrkdwn',
        text: '*Prize Category:* TestSponsor2\n'
          + '*Time:* 12:05 PM - 12:10 PM\n'
          + '*Zoom Link:* http://zoom.com\n',
      },
    ],
  },
  {
    type: 'section',
    fields: [
      {
        type: 'mrkdwn',
        text: '*Prize Category:* TestSponsor\n'
          + '*Time:* 12:20 PM - 12:25 PM\n'
          + '*Zoom Link:* http://zoom.com\n',
      },
    ],
  },
];

const consoleSpy = jest.spyOn(console, 'error');
jest.mock('@slack/web-api');
const slackPostMessageMock = jest.fn(() => Promise.resolve({ ok: true }));

describe('sendExpoScheduleSlack', () => {
  beforeAll((done) => {
    done();
  });

  beforeEach(() => {
    AwsMock.mock('DynamoDB.DocumentClient', 'scan', (params, callback) => {
      if (params.TableName === process.env.MEMBERSHIPS_TABLE) {
        return callback(null, { Items: memberships });
      }
      if (params.TableName === process.env.USERS_TABLE) {
        return callback(null, { Items: users });
      }
      if (params.TableName === process.env.EXPO_TABLE) {
        return callback(null, { Items: expoTable });
      }
      return callback();
    });

    WebClient.mockImplementation(() => ({
      chat: {
        postMessage: slackPostMessageMock,
      },
    }));
  });

  afterEach(() => {
    AwsMock.restore();
    consoleSpy.mockClear();
    slackPostMessageMock.mockClear();
  });

  it('Sends messages', async () => {
    const response = await wrapped.run();
    expect(response).toBeDefined();
    expect(response).toHaveProperty('statusCode', 200);
    expect(consoleSpy).toHaveBeenCalledTimes(0);

    // Gets the parameters of the call to slack
    const [[postParams1], [postParams2], [postParams3]] = slackPostMessageMock.mock.calls;
    expect(postParams1.channel).toBe('123');
    expect(postParams1.username).toBe('Bitcamp Platform Bot');
    expect(postParams1.blocks).toHaveLength(2);
    expect(postParams1.blocks[1]).toStrictEqual(expectedBlocks[0]);

    expect(postParams2.channel).toBe('456');
    expect(postParams2.username).toBe('Bitcamp Platform Bot');
    expect(postParams2.blocks).toHaveLength(2);
    expect(postParams2.blocks[1]).toStrictEqual(expectedBlocks[0]);

    expect(postParams3.channel).toBe('789');
    expect(postParams3.username).toBe('Bitcamp Platform Bot');
    expect(postParams3.blocks).toHaveLength(3);
    expect(postParams3.blocks[1]).toStrictEqual(expectedBlocks[1]);
    expect(postParams3.blocks[2]).toStrictEqual(expectedBlocks[2]);

    expect(JSON.parse(response.body)).toHaveLength(0);
  });

  it('is missing slack id', async () => {
    AwsMock.restore('DynamoDB.DocumentClient', 'scan');
    AwsMock.mock('DynamoDB.DocumentClient', 'scan', (params, callback) => {
      if (params.TableName === process.env.MEMBERSHIPS_TABLE) {
        return callback(null, { Items: [] });
      }
      if (params.TableName === process.env.USERS_TABLE) {
        return callback(null, { Items: users });
      }
      if (params.TableName === process.env.EXPO_TABLE) {
        return callback(null, { Items: expoTable });
      }
      return callback();
    });

    const response = await wrapped.run();
    expect(response).toBeDefined();
    expect(response).toHaveProperty('statusCode', 200);
    // Should print an error but continue to run
    expect(consoleSpy).toHaveBeenCalledTimes(2);
  });
});
