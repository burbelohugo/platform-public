// tests for getExpoScheduleSponsor
// Generated by serverless-jest-plugin

const AwsMock = require('aws-sdk-mock');
const jestPlugin = require('serverless-jest-plugin');
const mod = require('../handler');

AwsMock.mock('config', 'update', jest.fn());
const wrapped = jestPlugin.lambdaWrapper.wrap(mod, { handler: 'getExpoScheduleSponsor' });

const expoTable = [{
  id: 'testDemoId',
  end_time: 'Test time end',
  project_id: 'testProjectId',
  sponsor_name: 'TestSponsor',
  start_time: 'Test time start',
}];

const consoleSpy = jest.spyOn(console, 'error');
const dbScanMock = jest.fn().mockImplementation((params, callback) => {
  if (params.TableName === process.env.EXPO_TABLE) {
    return callback(null, { Items: expoTable });
  }
  return callback();
});

describe('getExpoScheduleSponsor', () => {
  beforeAll((done) => {
    done();
  });

  beforeEach(() => {
    AwsMock.mock('DynamoDB.DocumentClient', 'scan', dbScanMock);
  });

  afterEach(() => {
    AwsMock.restore();
    consoleSpy.mockClear();
  });

  it('Gets the schedule properly', async () => {
    const response = await wrapped.run(
      { queryStringParameters: { sponsorName: 'testSponsor' } },
    );

    expect(response).toBeDefined();
    expect(response).toHaveProperty('statusCode', 200);
    expect(consoleSpy).toHaveBeenCalledTimes(0);

    // Gets the parameters of the call to scan (call to MEMBERSHIPS_TABLE)
    const [[params]] = dbScanMock.mock.calls;
    expect(params.ExpressionAttributeValues[':tableValue']).toBe('testSponsor');

    expect(JSON.parse(response.body)).toStrictEqual(expoTable);
  });

  it('finds no demos', async () => {
    AwsMock.restore('DynamoDB.DocumentClient', 'scan');
    AwsMock.mock('DynamoDB.DocumentClient', 'scan', (params, callback) => {
      if (params.TableName === process.env.EXPO_TABLE) {
        return callback(null, { Items: [] });
      }
      return callback();
    });

    const response = await wrapped.run(
      { queryStringParameters: { sponsorName: 'testSponsor' } },
    );

    expect(response).toBeDefined();
    expect(response).toHaveProperty('statusCode', 200);
    expect(consoleSpy).toHaveBeenCalledTimes(0);
    expect(JSON.parse(response.body)).toHaveLength(0);
  });

  it('is missing event body keys', async () => {
    const response = await wrapped.run({ queryStringParameters: null });

    expect(response).toBeDefined();
    expect(response).toHaveProperty('statusCode', 500);
    expect(JSON.parse(response.body).message).toBe('Missing sponsorName parameter');
  });
});
