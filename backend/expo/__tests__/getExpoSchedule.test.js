// tests for getExpoSchedule
// Generated by serverless-jest-plugin

const AwsMock = require('aws-sdk-mock');
const jestPlugin = require('serverless-jest-plugin');
const mod = require('../handler');

AwsMock.mock('config', 'update', jest.fn());
const wrapped = jestPlugin.lambdaWrapper.wrap(mod, { handler: 'getExpoSchedule' });

const expoTable = [{
  id: 'testDemoId',
  end_time: 'Test time end',
  project_id: 'testProjectId',
  sponsor_name: 'TestSponsor',
  start_time: 'Test time start',
}];

const consoleSpy = jest.spyOn(console, 'error');
const dbScanMock = jest.fn().mockImplementation((params, callback) => {
  if (params.TableName === process.env.EXPO_TABLE) {
    return callback(null, { Items: expoTable });
  }
  return callback();
});

describe('getExpoSchedule', () => {
  beforeAll((done) => {
    done();
  });

  beforeEach(() => {
    AwsMock.mock('DynamoDB.DocumentClient', 'scan', dbScanMock);
  });

  afterEach(() => {
    AwsMock.restore();
    consoleSpy.mockClear();
  });

  it('Gets the schedule properly', async () => {
    const response = await wrapped.run({});

    expect(response).toBeDefined();
    expect(response).toHaveProperty('statusCode', 200);
    expect(consoleSpy).toHaveBeenCalledTimes(0);

    expect(JSON.parse(response.body)).toStrictEqual(expoTable);
  });
});
