// tests for add_favorite_hacker
// Generated by serverless-jest-plugin

const mod = require('../handler');

const jestPlugin = require('serverless-jest-plugin');
const lambdaWrapper = jestPlugin.lambdaWrapper;
const adder = lambdaWrapper.wrap(mod, { handler: 'add_favorite_hacker' });

const AWS = require('aws-sdk');
const UUID = require('uuid');

const sponsor = UUID.v4();
const hacker = UUID.v4();

const example_favorite_hacker = {
  body: JSON.stringify({
    sponsor_id: sponsor,
    user_id: hacker,
  }),
};

const no_user_id = {
  body: JSON.stringify({
    sponsor_id: sponsor,
  }),
};

const no_sponsor_id = {
  body: JSON.stringify({
    user_id: hacker,
  }),
};

const invalid_request = {
  body: JSON.stringify({
    full_name: 'delete user'
  }),
};

describe('add_favorite_hacker', () => {
  beforeAll((done) => {  
    done();
  });

  it('Adds a favorite hacker and checks it exists', () => adder.run(example_favorite_hacker).then(async (response) => {
    expect(JSON.parse(example_favorite_hacker.body)).toMatchObject(JSON.parse(response.body));
  }));

  it('Fails to favorite hacker without user_id', () => adder.run(no_user_id).then(async (response) => {
    expect(response).toBeDefined();
    expect(response).toHaveProperty('statusCode', 500);
  }));

  it('Fails to favorite hacker without sponsor_id', () => adder.run(no_sponsor_id).then(async (response) => {
    expect(response).toBeDefined();
    expect(response).toHaveProperty('statusCode', 500);
  }));

  it('Fails to favorite hacker without both ids', () => adder.run(invalid_request).then(async (response) => {
    expect(response).toBeDefined();
    expect(response).toHaveProperty('statusCode', 500);
  }));
});