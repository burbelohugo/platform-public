// tests for create_mentorship_request
// Generated by serverless-jest-plugin

const jestPlugin = require('serverless-jest-plugin');
const mod = require('../handler');

const { lambdaWrapper } = jestPlugin;
const adder = lambdaWrapper.wrap(mod, { handler: 'create_mentorship_request' });

const request = {
  body: JSON.stringify({
    title: 'I need help with Java!',
    description: "Java is a terrible language and I don't understand it, please help!",
    topic: 'backend',
    user_id: 'test',
  }),
};

const no_title = {
  body: JSON.stringify({
    description: "Java is a terrible language and I don't understand it, please help!",
    topic: 'backend',
  }),
};

const no_description = {
  body: JSON.stringify({
    title: 'I need help with Java!',
    topic: 'backend',
  }),
};

const no_topic = {
  body: JSON.stringify({
    title: 'I need help with Java!',
    topic: "Java is a terrible language and I don't understand it, please help!",
  }),
};

describe('create_mentorship_request', () => {
  beforeAll((done) => {
    done();
  });

  it('uploads a mentorship request, then checks if it succeeded', async () => await adder.run(request).then(async (response) => {
    const res = JSON.parse(response.body);
    expect(response).toBeDefined();
    expect(response).toHaveProperty('statusCode', 200);
  }));

  it('Correctly rejects a response without a title', () => adder.run(no_title).then(async (response) => {
    expect(response).toBeDefined();
    expect(response).toHaveProperty('statusCode', 500);
  }));

  it('Correctly rejects a response without a description', () => adder.run(no_description).then(async (response) => {
    expect(response).toBeDefined();
    expect(response).toHaveProperty('statusCode', 500);
  }));

  it('Correctly rejects a response without a topic', () => adder.run(no_topic).then(async (response) => {
    expect(response).toBeDefined();
    expect(response).toHaveProperty('statusCode', 500);
  }));
});
